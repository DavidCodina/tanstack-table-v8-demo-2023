{"version":3,"file":"static/js/808.08226e4e.chunk.js","mappings":"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","sources":["pages/Home/columns.tsx","pages/Home/index.tsx"],"sourcesContent":["import { createColumnHelper } from '@tanstack/react-table'\nimport { format } from 'date-fns'\n\n/* ========================================================================\n\n======================================================================== */\n///////////////////////////////////////////////////////////////////////////\n//\n// What's new in v8? columns used to have an accessor property. Now it's called accessorKey.\n// See here: https://tanstack.com/table/v8/docs/api/core/column-def\n//\n// Also, header and footer need not be capitalized.\n// We can still write out the columns manually, but now there's a createColumnHelper() function\n// that is designed to help us and maximize type safety. Personally, I don't really like this\n// because it makes it more difficult to see what's going on. In any case, you can log the\n// output to see what it's actually generating:\n//\n///////////////////////////////////////////////////////////////////////////\n\ntype Person = {\n  id: number\n  first_name: string\n  last_name: string\n  date_of_birth: string\n  country: string\n  phone: string\n  email: string\n  age: number\n  isCool: boolean\n}\n\nconst columnHelper = createColumnHelper<Person>()\n\nexport const columns /* : ColumnDef<Person, any>[] */ = [\n  columnHelper.accessor('id', {\n    // cell: (info) => info.getValue(),\n    cell: (info: any) => (\n      // In previous examples, I used renderValue(), but the docs use getValue().\n      // I'm  not sure what the difference is.\n      <span style={{ fontWeight: 'bold' }}>{info.renderValue()}</span>\n    ),\n    header: (_info) => {\n      // Putting a log statement here is a good place to check for infinite\n      // rerenders that might result from accidentally forgetting to memoize\n      // an array, object, function, etc.\n      return <span>ID</span>\n    },\n    footer: (_info) => <span>ID</span>,\n    enableSorting: false // Use this to disable sorting on a column\n  }),\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  // Gotcha: Boolean values always need to be formatted.\n  // Default sorting works well because they are treates as 0 and 1.\n  // However, filtering won't work. This means that we don't actually\n  // want to use cell to format the value:\n  //\n  // columnHelper.accessor('isCool', {\n  //   cell: (info) => {\n  //     return info.getValue() === true ? 'true' : 'false'\n  //   },\n  //   header: (_info) => 'Is Cool',\n  //   footer: (_info) => 'Is Cool'\n  // }),\n  //\n  // Instead use the accessor. In this case, the string 'false' just so happens to\n  // be lower in sort order than 'true', so the default sorter still works\n  // correctly against boolean values when they are converted to strings.\n  // Thus, unlike ISO date formatting, booleans do not need to implement:\n  //\n  //   sortingFn: 'sortByRawValue' as any\n  //\n  // You could, but it wouldn't make a difference in th outcome.\n  //\n  ///////////////////////////////////////////////////////////////////////////\n\n  columnHelper.accessor(\n    (row) => {\n      const isCool = row.isCool\n      return isCool === true ? 'true' : 'false'\n    },\n    {\n      id: 'isCool',\n      header: (_info) => 'Is Cool',\n      footer: (_info) => 'Is Cool'\n    }\n  ),\n\n  columnHelper.accessor('first_name', {\n    cell: (info) => info.getValue(),\n    header: (_info) => 'First Name',\n    footer: (_info) => 'First Name'\n  }),\n\n  // This is merely demonstrating a different approach to implementation.\n  columnHelper.accessor((row) => row.last_name, {\n    id: 'last_name',\n    cell: (info) => info.getValue(),\n    header: () => 'Last Name',\n    footer: (_info) => 'Last Name'\n  }),\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  // If we modified the cell output, then the filter function would still\n  // filter by the original value:\n  //\n  // columnHelper.accessor('date_of_birth', {\n  //   cell: (info) => {\n  //     let value: any = info.getValue()\n  //     if (typeof value === 'string') {\n  //       value = new Date(value)\n  //       return format(value, 'MM/dd/yyyy')\n  //     }\n  //     return value\n  //   },\n  //   header: (_info) => 'Date of Birth',\n  //   footer: (_info) => 'Date of Birth',\n  //   enableColumnFilter: true\n  // }),\n  //\n  // That could be confusing for the end user. Initially, I thought the solution\n  // was to  return the formatted value from accessorFn. This makes it so the\n  // formatted value is also used for filtering.\n  //\n  // https://tanstack.com/table/v8/docs/guide/column-defs#accessor-functions\n  // columnHelper.accessor(\n  //   (row) => {\n  //     const DOB = row.date_of_birth\n  //     const formatted = format(new Date(DOB), 'MM/dd/yyyy')\n  //     return formatted\n  //   },\n  //   {\n  //     id: 'date_of_birth',\n  //     header: (_info) => 'Date of Birth',\n  //     footer: (_info) => 'Date of Birth',\n  //     enableColumnFilter: true\n  //   }\n  // ),\n  //\n  // But now the filtering works as expected, but the sorting will be broken.\n  // So... What do we do? The solution is to also use a custom sorting function.\n  // Why not use a custom filter function? Because we also want the global filter\n  // to work with the formatted value.\n  //\n  ///////////////////////////////////////////////////////////////////////////\n\n  // https://tanstack.com/table/v8/docs/guide/column-defs#accessor-functions\n  columnHelper.accessor(\n    (row) => {\n      const DOB = row.date_of_birth\n      const formatted = format(new Date(DOB), 'MM/dd/yyyy')\n      return formatted\n    },\n    {\n      id: 'date_of_birth',\n      header: (_info) => 'Date of Birth',\n      footer: (_info) => 'Date of Birth',\n      enableColumnFilter: true,\n      ///////////////////////////////////////////////////////////////////////////\n      //\n      // Typescript will complain if you don't give it a built-in sortingFn.\n      // https://tanstack.com/table/v8/docs/api/features/sorting\n      // The docs indicate that: the final list of sorting functions\n      // available for the columnDef.sortingFn use the following type:\n      //\n      // export type SortingFnOption<TData extends AnyData> =\n      //   | 'auto'\n      //   | SortingFns\n      //   | BuiltInSortingFns\n      //   | SortingFn<TData>\n      //\n      // I'm not sure if there's anything that can currently be done for this\n      // other than setting it to any. There's not really a way that Typescript\n      // COULD automatically know what the custom sorters are. This data gets\n      // passed in to the table instance at the same time as the sortingFn does.\n      //\n      ///////////////////////////////////////////////////////////////////////////\n      sortingFn: 'sortByRawValue' as any\n    }\n  ),\n\n  // Gotcha: Using columnHelper.display({ ... }) breaks the sorting feature.\n  // https://tanstack.com/table/v8/docs/guide/column-defs#column-helpers\n  // Display columns do not have a data model which means they cannot be sorted,\n  // filtered, etc, but they can be used to display arbitrary content in the table, eg.\n  // a row actions button, checkbox, expander, etc.\n  columnHelper.accessor('country', {\n    cell: (info) => info.getValue(),\n    header: (_info) => 'Country',\n    footer: (_info) => 'Country'\n  }),\n\n  columnHelper.accessor('phone', {\n    cell: (info) => info.getValue(),\n    header: (_info) => 'Phone',\n    footer: (_info) => 'Phone'\n  }),\n  columnHelper.accessor('email', {\n    cell: (info) => info.getValue(),\n    header: (_info) => 'Email',\n    footer: (_info) => 'Email'\n  }),\n\n  // Strangely, the default sorting function will do desc, asc, none for numbers.\n  // However, it will to asc, desc, none for strings.\n  // Ultimately, the results are consistent but it's odd that the order isn't.\n  // This may be because the table core reconizes type number and uses a different\n  // built-in sorter on it.\n  columnHelper.accessor('age', {\n    cell: (info) => info.getValue(),\n    header: (_info) => 'Age',\n    footer: (_info) => 'Age'\n  })\n]\n\n/* ======================\n    columnsAlternate\n====================== */\n\nexport const columnsAlternate = [\n  {\n    header: 'Id', // This is the label for the <th> in the <thead> / 'Header'\n    footer: 'Id', // This is the label for the <th> in the <tfoot> / 'Footer'\n\n    // https://tanstack.com/table/v8/docs/guide/column-defs#column-formatting--rendering\n    // If you want, you can customize the cell JSX.\n    // The same can be done with header and footer.\n    cell: (props: any) => {\n      // return <span style={{ fontWeight: 'bold' }}>{props.row.original.id}</span>\n      // return <span style={{ fontWeight: 'bold' }}>{props.cell.getValue()}</span>\n\n      return <span style={{ fontWeight: 'bold' }}>{props.renderValue()}</span>\n    },\n\n    // This is the object key for the value that we want to output in <td> / 'Cell'\n    // It corresponds to object property names in MOCK_DATA.\n    accessorKey: 'id',\n    disableSort: true\n  },\n  {\n    header: 'First Name',\n    footer: 'First Name',\n    accessorKey: 'first_name',\n    // This is a custom property that allows us to opt in to column filtering,\n    // rather than opting out each time in the column definition. The table\n    // looks for this property and then only renders the column filter as needed.\n    enableFilter: true\n    // I'm not sure why, but we don't seem to need to include the\n    // filter function. It may actually default to the globalFilterFn\n    // filterFn: includesString\n  },\n  {\n    header: 'Last Name',\n    footer: 'Last Name',\n    accessorKey: 'last_name'\n  },\n  {\n    header: 'Date of Birth',\n    footer: 'Date of Birth',\n    accessorKey: 'date_of_birth',\n    enableFilter: true,\n    accessorFn: (originalRow: any, _index: any) => {\n      const DOB = originalRow.date_of_birth\n      const formatted = format(new Date(DOB), 'MM/dd/yyyy')\n      return formatted\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    //\n    // If we modified the cell output, then the filter function would still\n    // filter by the original value. Generally, that's probably not what we\n    // want to do because it would confuse the end user. Instead, we can\n    // return the formatted value from accessorFn. This makes it so the\n    // formatted value is also used for filtering (and presumably sorting).\n    // Thus, don't do this:\n    //\n    //   cell: (info) => {\n    //     let value = info.getValue()\n    //     if (typeof value === 'string') {\n    //       value = new Date(value)\n    //       return format(value, 'MM/dd/yyyy')\n    //     }\n    //    return value\n    //   }\n    //\n    ///////////////////////////////////////////////////////////////////////////\n  },\n  {\n    header: 'Country',\n    footer: 'Country',\n    accessorKey: 'country'\n  },\n  {\n    header: 'Phone',\n    footer: 'Phone',\n    accessorKey: 'phone'\n  },\n  {\n    header: 'Email',\n    footer: 'Email',\n    accessorKey: 'email'\n  },\n  {\n    header: 'Age',\n    footer: 'Age',\n    accessorKey: 'age'\n  }\n]\n","// Third-party imports\nimport { useState } from 'react'\n\n// Custom imports\nimport { HR, Switch, Table, TerminalButton, Waves } from 'components'\nimport data from './data.json' // https://mockaroo.com\nimport { columns } from './columns'\n\n/* ========================================================================\n                                Home\n======================================================================== */\n\nconst Home = () => {\n  const [count, setCount] = useState(0) // Used to test Table renders (+useEffects, etc).\n  const [titleInfo, setTitleInfo] = useState({\n    title: 'An amazing title here!',\n    subtitle: \"This is an amazing table! It can do lot's of stuff!\"\n  })\n  const [columnOrder, setColumnOrder] = useState<string[]>([])\n  const [columnVisibility, setColumnVisibility] = useState<\n    Record<string, boolean>\n  >({ select: false })\n  const [showControls, setShowControls] = useState(true)\n  const [showGlobalFilter, setShowGlobalFilter] = useState(true)\n  const [showPagination, setShowPagination] = useState(true)\n  const [showExportCSVButton, setShowExportCSVButton] = useState(true)\n  const [showVisibilityChecks, setShowVisibilityChecks] = useState(false)\n  const [showColumnFilters, setShowColumnFilters] = useState(true)\n  const [showFooter, setShowFooter] = useState(false)\n\n  /* ======================\n     toggleColumnOrder() \n  ====================== */\n\n  const toggleColumnOrder = () => {\n    if (columnOrder.length === 0) {\n      // An arbitrary ordering for demo purposes.\n      // Unknown elements are ignored. Unlisted elements fallback\n      // to their default order at the end of the list.\n      setColumnOrder(['select', 'id', 'age', 'abc123', 'email'])\n    } else {\n      setColumnOrder([])\n    }\n  }\n\n  /* ======================\n    toggleSelectColumn() \n  ====================== */\n\n  const toggleSelectColumn = () => {\n    setColumnVisibility((previousColumnVisibility) => {\n      // The select property could be omitted, which means it is true,\n      // assuming onSelectionChange prop has been passed in, thereby\n      // enabling the feature.\n      if (\n        !previousColumnVisibility.hasOwnProperty('select') ||\n        previousColumnVisibility.select === true\n      ) {\n        return {\n          ...previousColumnVisibility,\n          select: false\n        }\n      }\n      return {\n        ...previousColumnVisibility,\n        select: true\n      }\n    })\n  }\n\n  /* ======================\n    renderDemoControls()\n  ====================== */\n\n  const renderDemoControls = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: 15,\n          justifyContent: 'center',\n          marginBottom: 15\n        }}\n      >\n        <Switch\n          checked={showControls}\n          id='toggle-title-info'\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={() => {\n            if (titleInfo?.title === '') {\n              setTitleInfo({\n                title: 'An amazing title here!',\n                subtitle: \"This is an amazing table! It can do lot's of stuff!\"\n              })\n            } else {\n              setTitleInfo({\n                title: '',\n                subtitle: ''\n              })\n            }\n\n            setShowControls((v) => !v)\n          }}\n          text='Toggle Title Info'\n        />\n\n        <Switch\n          checked={showControls}\n          id='toggle-controls'\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={() => {\n            setShowControls((v) => !v)\n          }}\n          text='Toggle Controls'\n        />\n\n        <Switch\n          checked={showGlobalFilter}\n          id='toggle-global-filter'\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={() => {\n            setShowGlobalFilter((v) => !v)\n          }}\n          text='Toggle Global Filter'\n        />\n\n        <Switch\n          id='toggle-pagination'\n          checked={showPagination}\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={() => {\n            setShowPagination((v) => !v)\n          }}\n          text='Toggle Pagination'\n        />\n\n        {/*  const [showExportCSVButton, setShowExportCSVButton] = useState(true) */}\n\n        <Switch\n          id='toggle-csv-button'\n          checked={showExportCSVButton}\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={() => {\n            setShowExportCSVButton((v) => !v)\n          }}\n          text='Toggle CSV Button'\n        />\n\n        <Switch\n          id='toggle-column-selection'\n          checked={showVisibilityChecks}\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={() => {\n            setShowVisibilityChecks((v) => !v)\n          }}\n          text='Toggle Column Selection'\n        />\n\n        <Switch\n          checked={showColumnFilters}\n          id='toggle-column-filters'\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={() => {\n            setShowColumnFilters((v) => !v)\n          }}\n          text='Toggle Column Filters'\n        />\n\n        <Switch\n          checked={columnVisibility?.select !== false}\n          id='toggle-select-column'\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={toggleSelectColumn}\n          text='Toggle Select Column'\n        />\n\n        <Switch\n          id='toggle-footer'\n          checked={showFooter}\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={() => {\n            setShowFooter((v) => !v)\n          }}\n          text='Toggle Footer'\n        />\n\n        <Switch\n          checked={columnOrder.length !== 0}\n          id='toggle-column-order'\n          labelStyle={{\n            fontFamily: 'Inconsolata, monospace'\n          }}\n          onChange={toggleColumnOrder}\n          text='Toggle Column Order'\n        />\n      </div>\n    )\n  }\n\n  /* ======================\n      renderTable()\n  ====================== */\n\n  const renderTable = () => {\n    return (\n      <Table\n        // containerClassName and containerStyle are useful for setting like width, margin, etc.\n        // The container element wraps controlsContainer and the tableContainer.\n        containerClassName=''\n        containerStyle={{\n          backgroundColor: '#fff',\n          border: '1px solid #409',\n          borderRadius: 15,\n          boxShadow: '0 0.125rem 0.25rem rgba(0, 0, 0, 0.2)',\n          overflow: 'hidden'\n        }}\n        titleContainerClassName=''\n        titleContainerStyle={{ textAlign: 'center' }}\n        titleClassName='outline-strong outline-secondary outline-width-1 outline-shadow'\n        subtitleClassName=''\n        subtitleStyle={{ color: '#409' }}\n        titleStyle={{ fontSize: 20 }}\n        controlsClassName=''\n        controlsStyle={{}}\n        // tableContainer is the div that wraps the actual <table> element.\n        // Think of this clike the <div className='table-responsive'> wrapper\n        // that is often implemented with bootstrap.\n        tableContainerClassName=''\n        tableStyle={{ fontSize: 12 }}\n        tableContainerStyle={{}}\n        tableClassName=''\n        tableSize='sm' // 'sm' / 'small'\n        tableBordered // Adds column lines\n        tableBorderless={false} // Removes row lines (tableBordered has precedence).\n        // Removes the outer border of the table (has precedence over tableBordered).\n        // tableFlush is generally not needed if already using tableBorderless. Generally,\n        // you'd want to remove the border from the actual table, and instead pass in a\n        // custom border style to the top-level container using containerStyle\n        tableFlush\n        tableStriped\n        // tableHover\n        tableHoverPrimary // Has precedence over tableHover - hardcoded to use MainStem's soft primary color.\n        tableHighlightSelectedRows // Default: false\n        headerClassName=''\n        headerStyle={{\n          textAlign: 'center',\n          verticalAlign: 'middle'\n        }}\n        thClassName=''\n        thStyle={{ color: '#444' }}\n        tdClassName=''\n        tdStyle={{}}\n        // globalFilterClassName='form-control form-control-sm'\n        globalFilterStyle={{}}\n        // columnFilterClassName='form-control form-control-sm'\n        columnFilterStyle={{}}\n        // className & style props for pagination.\n        // paginationClassName='pagination pagination-sm'\n        paginationStyle={{}}\n        // paginationItemClassName='page-item'\n        paginationItemStyle={{}}\n        // paginationButtonClassName='page-link'\n        paginationButtonStyle={{}}\n        // pageNumberInputClassName='form-control form-control-sm'\n        pageNumberInputStyle={{}}\n        // pageSizeSelectClassName='form-select form-select-sm'\n        pageSizeSelectStyle={{}}\n        // exportCSVButtonClassName='btn btn-outline-primary btn-sm'\n        // exportCSVButtonStyle={{}}\n        // rowSelectCheckboxClassName='form-check-input'\n        rowSelectCheckboxStyle={{}}\n        // columnSelectCheckboxGroupClassName='form-check'\n        columnSelectCheckboxGroupStyle={{}}\n        // columnSelectCheckboxClassName='form-check-input'\n        columnSelectCheckboxStyle={{}}\n        bodyClassName=''\n        bodyStyle={{\n          textAlign: 'center',\n          verticalAlign: 'middle'\n        }}\n        footerClassName=''\n        footerStyle={{ textAlign: 'center', verticalAlign: 'middle' }}\n        data={data}\n        // columnOrder is an optional prop that allows the consumer to\n        // dynamically modify the default order of the columns. It works\n        // on mount, and anytime thereafter. columnOrder is never set from\n        // within, so there's no need to have a callback prop like\n        // to update the external state.\n        columnOrder={columnOrder}\n        // columnVisibility is an optional prop that allows the consumer to\n        // dynamically modify the default visibility of the columns. It works\n        // on mount, and anytime thereafter.\n        columnVisibility={columnVisibility}\n        // If one is controlling visibility externally AND also showing the built-in\n        // visibility check UI, then it's best to also pass in an onColumnVisibilityChange\n        // callback. That way if the internal visibility state changes, we can pass\n        // it back to the consuming environment, so the two states remain in sync.\n        onColumnVisibilityChange={(newColumnVisibility: any) => {\n          setColumnVisibility(newColumnVisibility)\n        }}\n        pageIndex={1} // Default: 0. Only used during initialization.\n        pageSize={10} // Default: 10. Only used during initialization.\n        showGlobalFilter={showGlobalFilter} // Default: true.\n        // pageSize will revert to the default pageSize when\n        // changing showPagination from false to true.\n        showPagination={showPagination} // Default: true.\n        // Optional: Boolean that allows consumer to opt-in to showing the built-in column\n        // select (visibility) checkboxes. Note: it's also possible to build an external\n        // checkbox implementation that modifies the external columnVisibility state.\n        showExportCSVButton={showExportCSVButton}\n        showColumnSelectCheckboxes={showVisibilityChecks} // Default: true\n        // If showGlobalFilter, showPagination and showVisibilityChecks are all false,\n        // the controls will be hidden. However, a better approach is to use showControls.\n        showControls={showControls}\n        showColumnFilters={showColumnFilters}\n        // If Table does not detect a footer property on the first column in the column\n        // definition (i.e., !hasFooter), then showFooter will essentially be disabled.\n        showFooter={showFooter} // Default: true\n        columns={columns}\n        ///////////////////////////////////////////////////////////////////////////\n        //\n        // Unlike with the global filter and visibility checkboxes,\n        // the presence of the row selection column/feature is not determined\n        // by a boolean value. Rather, when the onSelectionChange prop\n        // is passed in, this indicates to Table that the 'select' column/feature\n        // should be implemented. This process occurs at initialization, and\n        // therefore can't be dynamically updated.\n        //\n        // That said, if you want to implement the feature, but not show the column,\n        // then you can pass { select: false } to the columnVisibility prop.\n        //\n        // Internally, table takes the onSelectionChange prop and wraps it in a ref\n        // before passing it into useEffect(). This means that there's no need to\n        // wrap it in a useCallback() from the consuming environment.\n        //\n        ///////////////////////////////////////////////////////////////////////////\n        onSelectionChange={(selectedData: Record<any, any>[]) => {\n          console.log('Selected data:', selectedData)\n        }}\n        title={titleInfo?.title}\n        subtitle={titleInfo?.subtitle}\n        // Provide an optional name for the CSV export. Otherwise it defaults to exported-data.csv\n        csvExportFileName='mainstem-export'\n        // https://github.com/react-csv/react-csv#nested-json-data\n        // Passing in csvHeaders allows you to limit what fields are exported.\n        // It also allows you to relabel the properties when being exported.\n        csvHeaders={[\n          { label: 'id', key: 'id' },\n          { label: 'First Name', key: 'first_name' },\n          { label: 'Last Name', key: 'last_name' }\n        ]}\n      />\n    )\n  }\n\n  /* ======================\n  renderClickCounterButton()\n  ====================== */\n\n  const renderClickCounterButton = () => {\n    return (\n      <TerminalButton\n        // className=''\n        onClick={() => setCount((v) => v + 1)}\n        style={{ display: 'block', margin: '15px auto' }}\n        title='Count button used to test table rerender optimization.'\n      >\n        COUNT:{count}\n      </TerminalButton>\n    )\n  }\n\n  /* ======================\n          return\n  ====================== */\n\n  return (\n    <div style={{ minHeight: '100vh', padding: 25 }}>\n      <h1\n        className='outline-strong outline-primary outline-width-1 outline-shadow'\n        style={{\n          fontSize: 50,\n          fontWeight: 900,\n          lineHeight: 1,\n          margin: '0px auto 50px auto',\n          textAlign: 'center'\n        }}\n      >\n        Table Demo\n      </h1>\n\n      <HR style={{ marginBottom: 50 }} />\n\n      {renderDemoControls()}\n      {/* {renderClickCounterButton()} */}\n      {renderTable()}\n\n      <Waves />\n    </div>\n  )\n}\n\nexport default Home\n"],"names":["columnHelper","createColumnHelper","columns","accessor","cell","info","style","fontWeight","renderValue","header","_info","footer","enableSorting","row","isCool","id","getValue","last_name","DOB","date_of_birth","format","Date","enableColumnFilter","sortingFn","useState","title","subtitle","titleInfo","setTitleInfo","columnOrder","setColumnOrder","select","columnVisibility","setColumnVisibility","showControls","setShowControls","showGlobalFilter","setShowGlobalFilter","showPagination","setShowPagination","showExportCSVButton","setShowExportCSVButton","showVisibilityChecks","setShowVisibilityChecks","showColumnFilters","setShowColumnFilters","showFooter","setShowFooter","toggleColumnOrder","length","toggleSelectColumn","previousColumnVisibility","hasOwnProperty","minHeight","padding","className","fontSize","lineHeight","margin","textAlign","HR","marginBottom","display","flexWrap","gap","justifyContent","checked","labelStyle","fontFamily","onChange","v","text","containerClassName","containerStyle","backgroundColor","border","borderRadius","boxShadow","overflow","titleContainerClassName","titleContainerStyle","titleClassName","subtitleClassName","subtitleStyle","color","titleStyle","controlsClassName","controlsStyle","tableContainerClassName","tableStyle","tableContainerStyle","tableClassName","tableSize","tableBordered","tableBorderless","tableFlush","tableStriped","tableHoverPrimary","tableHighlightSelectedRows","headerClassName","headerStyle","verticalAlign","thClassName","thStyle","tdClassName","tdStyle","globalFilterStyle","columnFilterStyle","paginationStyle","paginationItemStyle","paginationButtonStyle","pageNumberInputStyle","pageSizeSelectStyle","rowSelectCheckboxStyle","columnSelectCheckboxGroupStyle","columnSelectCheckboxStyle","bodyClassName","bodyStyle","footerClassName","footerStyle","data","onColumnVisibilityChange","newColumnVisibility","pageIndex","pageSize","showColumnSelectCheckboxes","onSelectionChange","selectedData","console","log","csvExportFileName","csvHeaders","label","key"],"sourceRoot":""}